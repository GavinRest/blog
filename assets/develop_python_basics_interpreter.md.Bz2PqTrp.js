import{_ as n,c as o,o as s,ae as i}from"./chunks/framework.BHrE6nLq.js";const g=JSON.parse('{"title":"Python 解释器","description":"","frontmatter":{},"headers":[],"relativePath":"develop/python/basics/interpreter.md","filePath":"develop/python/basics/interpreter.md"}'),a={name:"develop/python/basics/interpreter.md"};function l(h,t,e,r,p,d){return s(),o("div",null,t[0]||(t[0]=[i(`<h1 id="python-解释器" tabindex="-1">Python 解释器 <a class="header-anchor" href="#python-解释器" aria-label="Permalink to &quot;Python 解释器&quot;">​</a></h1><h2 id="什么是-python-解释器" tabindex="-1">什么是 Python 解释器？ <a class="header-anchor" href="#什么是-python-解释器" aria-label="Permalink to &quot;什么是 Python 解释器？&quot;">​</a></h2><p>创建的是一个以 <code>.py</code> 为扩展名的文本文件，其中包含 Python 语法的代码。但计算机不能直接运行这些代码，需要一个 <strong>Python 解释器</strong> 来解析并执行。</p><p>由于 Python 语言及其解释器都是 <strong>开源</strong> 的，因此任何有能力的开发者都可以编写<strong>自己的 Python 解释器</strong>（尽管难度较大）。目前，已有多个 Python 解释器可用，下面我们介绍其中几种常见的。</p><h2 id="_1-cpython" tabindex="-1">1. CPython <a class="header-anchor" href="#_1-cpython" aria-label="Permalink to &quot;1. CPython&quot;">​</a></h2><p><strong>CPython</strong> 是 Python 官方提供的默认解释器，也是使用最广泛的 Python 解释器。</p><ul><li><p><strong>特点</strong>：</p><ul><li>由 C 语言编写，因此称为 <em>CPython</em>。</li><li>直接运行 <code>python</code> 命令，即可启动 CPython 解释器。</li><li>兼容性最好，支持所有 Python 标准库和第三方库。</li><li>适用于大多数应用场景，如 Web 开发、数据分析、人工智能等。</li></ul></li><li><p><strong>如何检查是否使用 CPython</strong>：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(platform.python_implementation())</span></span></code></pre></div><p>如果输出 <code>CPython</code>，说明你正在使用 CPython 解释器。</p></li></ul><h2 id="_2-ipython" tabindex="-1">2. IPython <a class="header-anchor" href="#_2-ipython" aria-label="Permalink to &quot;2. IPython&quot;">​</a></h2><p><strong>IPython</strong> 是基于 CPython 之上的一个 <strong>交互式解释器</strong>，它增强了 Python 代码的交互性。</p><ul><li><p><strong>特点</strong>：</p><ul><li>主要用于交互式计算和调试。</li><li>相比于 CPython 提供了更强大的功能，比如自动补全、语法高亮、历史记录等。</li><li>CPython 采用 <code>&gt;&gt;&gt;</code> 作为提示符，而 IPython 采用 <code>In [序号]:</code> 作为提示符。</li></ul></li><li><p><strong>安装 IPython</strong>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ipython</span></span></code></pre></div></li><li><p><strong>运行 IPython</strong>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ipython</span></span></code></pre></div></li></ul><h2 id="_3-pypy" tabindex="-1">3. PyPy <a class="header-anchor" href="#_3-pypy" aria-label="Permalink to &quot;3. PyPy&quot;">​</a></h2><p><strong>PyPy</strong> 是一个高性能 Python 解释器，其目标是提高代码执行速度。</p><ul><li><p><strong>特点</strong>：</p><ul><li>采用 <strong>JIT（Just-In-Time）</strong> 技术，将 Python 代码动态编译成本机代码，从而提高运行效率。</li><li>适用于计算密集型任务，如科学计算、数据处理等。</li><li>兼容大部分 Python 代码，但与 CPython 有些许不同，可能导致部分库或代码行为不一致。</li></ul></li><li><p><strong>安装 PyPy</strong>（以 Ubuntu 为例）：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pypy3</span></span></code></pre></div></li><li><p><strong>运行 PyPy</strong>：</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pypy3</span></span></code></pre></div></li></ul><h2 id="_4-jython" tabindex="-1">4. Jython <a class="header-anchor" href="#_4-jython" aria-label="Permalink to &quot;4. Jython&quot;">​</a></h2><p><strong>Jython</strong> 是一个运行在 <strong>Java 平台</strong> 上的 Python 解释器。</p><ul><li><p><strong>特点</strong>：</p><ul><li>可以将 Python 代码 <strong>编译成 Java 字节码</strong>，然后运行在 JVM（Java 虚拟机）上。</li><li>适用于需要与 Java 代码无缝集成的项目。</li><li>由于运行在 JVM 上，Jython 不能直接使用 C 语言扩展的 Python 库（如 <code>numpy</code>）。</li></ul></li><li><p><strong>安装 Jython</strong>：</p><ul><li>访问 <a href="https://www.jython.org/" target="_blank" rel="noreferrer">Jython 官网</a> 下载安装包。</li><li>运行 <code>jython</code> 命令启动 Jython 解释器。</li></ul></li></ul><h2 id="_5-ironpython" tabindex="-1">5. IronPython <a class="header-anchor" href="#_5-ironpython" aria-label="Permalink to &quot;5. IronPython&quot;">​</a></h2><p><strong>IronPython</strong> 是一个运行在 <strong>.NET 平台</strong> 上的 Python 解释器。</p><ul><li><p><strong>特点</strong>：</p><ul><li>可以将 Python 代码 <strong>编译成 .NET 字节码</strong>，然后在 CLR（.NET 公共语言运行时）上执行。</li><li>适用于与 .NET 语言（如 C#、VB.NET）进行交互的项目。</li><li>由于与 .NET 深度结合，可以直接调用 .NET 库。</li></ul></li><li><p><strong>安装 IronPython</strong>：</p><ul><li>访问 <a href="https://ironpython.net/" target="_blank" rel="noreferrer">IronPython 官网</a> 下载并安装。</li><li>运行 <code>ipy</code> 命令启动 IronPython 解释器。</li></ul></li></ul><h2 id="_6-其他-python-解释器" tabindex="-1">6. 其他 Python 解释器 <a class="header-anchor" href="#_6-其他-python-解释器" aria-label="Permalink to &quot;6. 其他 Python 解释器&quot;">​</a></h2><p>除了上述几种 Python 解释器外，还有一些较少使用的 Python 解释器，例如：</p><ul><li><strong>MicroPython</strong>：专为嵌入式设备（如树莓派、ESP32）优化的 Python 解释器。</li><li><strong>Brython</strong>：用于在 Web 浏览器中运行 Python 代码的解释器。</li><li><strong>Stackless Python</strong>：优化了线程调度的 Python 解释器，适用于高并发应用。</li></ul><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><table tabindex="0"><thead><tr><th>解释器</th><th>运行平台</th><th>主要特点</th></tr></thead><tbody><tr><td><strong>CPython</strong></td><td>跨平台</td><td>官方标准解释器，使用最广泛</td></tr><tr><td><strong>IPython</strong></td><td>CPython 之上</td><td>增强交互体验，适用于数据科学</td></tr><tr><td><strong>PyPy</strong></td><td>跨平台</td><td>使用 JIT 技术，提高执行速度</td></tr><tr><td><strong>Jython</strong></td><td>Java 平台</td><td>运行在 JVM 上，可与 Java 代码交互</td></tr><tr><td><strong>IronPython</strong></td><td>.NET 平台</td><td>运行在 .NET 上，可调用 .NET 库</td></tr></tbody></table>`,24)]))}const c=n(a,[["render",l]]);export{g as __pageData,c as default};

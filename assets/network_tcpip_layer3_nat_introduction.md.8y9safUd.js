import{_ as t,c as r,o as n,ae as e}from"./chunks/framework.BHrE6nLq.js";const p=JSON.parse('{"title":"NAT 简介","description":"","frontmatter":{},"headers":[],"relativePath":"network/tcpip/layer3/nat_introduction.md","filePath":"network/tcpip/layer3/nat_introduction.md"}'),o={name:"network/tcpip/layer3/nat_introduction.md"};function i(s,a,l,h,d,c){return n(),r("div",null,a[0]||(a[0]=[e('<h1 id="nat-简介" tabindex="-1">NAT 简介 <a class="header-anchor" href="#nat-简介" aria-label="Permalink to &quot;NAT 简介&quot;">​</a></h1><h2 id="产生背景" tabindex="-1">产生背景 <a class="header-anchor" href="#产生背景" aria-label="Permalink to &quot;产生背景&quot;">​</a></h2><p>随着互联网的快速普及，IPv4 公网 IP 地址逐渐接近枯竭。为了解决这一问题，1994 年提出了 <strong>网络地址转换（NAT，Network Address Translation）</strong> 方案，并划分了专门的 <strong>私有 IP 地址网段</strong>（RFC 1918）供内部网络使用。这一方案极大缓解了公网 IP 地址的短缺问题，并促进了私有网络的广泛应用。</p><h2 id="nat-简介-1" tabindex="-1">NAT 简介 <a class="header-anchor" href="#nat-简介-1" aria-label="Permalink to &quot;NAT 简介&quot;">​</a></h2><p><strong>网络地址转换（NAT，Network Address Translation）</strong> 是一种在 IP 数据包通过路由器或防火墙时 <strong>重写源 IP 地址或目的 IP 地址</strong> 的技术。NAT 主要用于私有网络访问公网，或多个设备共享同一个公网 IP 进行通信。</p><h3 id="nat-的优缺点" tabindex="-1">NAT 的优缺点 <a class="header-anchor" href="#nat-的优缺点" aria-label="Permalink to &quot;NAT 的优缺点&quot;">​</a></h3><h4 id="✅-优点" tabindex="-1">✅ 优点 <a class="header-anchor" href="#✅-优点" aria-label="Permalink to &quot;✅ 优点&quot;">​</a></h4><ul><li><strong>缓解 IP 地址空间枯竭</strong>：多个私有 IP 地址可以通过一个或少量公网 IP 访问外网。</li><li><strong>提高安全性</strong>：内部私有 IP 地址对外不可见，一定程度上减少了外部攻击风险。</li><li><strong>简化网络管理</strong>：无需为每个设备分配公网 IP，降低运营成本。</li></ul><h4 id="❌-缺点" tabindex="-1">❌ 缺点 <a class="header-anchor" href="#❌-缺点" aria-label="Permalink to &quot;❌ 缺点&quot;">​</a></h4><ul><li><strong>增加交换延迟</strong>：NAT 需要对数据包进行修改，影响网络传输效率。</li><li><strong>破坏端到端 IP 连接</strong>：使得端到端的通信变得复杂，例如某些 P2P 应用需要额外配置。</li><li><strong>影响某些协议的兼容性</strong>：如 IPsec VPN 需要额外的 NAT 穿透机制。</li><li><strong>日志管理复杂</strong>：由于多个内部设备共享公网 IP，日志分析和溯源较困难。</li></ul><h2 id="nat-的实现方式" tabindex="-1">NAT 的实现方式 <a class="header-anchor" href="#nat-的实现方式" aria-label="Permalink to &quot;NAT 的实现方式&quot;">​</a></h2><p>NAT 的实现方式主要包括以下几种：</p><h3 id="_1-静态-nat-static-nat" tabindex="-1">1. 静态 NAT（Static NAT） <a class="header-anchor" href="#_1-静态-nat-static-nat" aria-label="Permalink to &quot;1. 静态 NAT（Static NAT）&quot;">​</a></h3><p>将一个私有 IP 地址 <strong>一对一映射</strong> 到一个公网 IP 地址，通常用于服务器对外提供服务。</p><h3 id="_2-动态-nat-dynamic-nat" tabindex="-1">2. 动态 NAT（Dynamic NAT） <a class="header-anchor" href="#_2-动态-nat-dynamic-nat" aria-label="Permalink to &quot;2. 动态 NAT（Dynamic NAT）&quot;">​</a></h3><p>从一个公网 IP 地址池中 <strong>动态分配</strong> 公网 IP 给私有 IP 地址，但每个私有 IP 仍然需要一个公网 IP。</p><h3 id="_3-网络地址与端口转换-napt-pat" tabindex="-1">3. 网络地址与端口转换（NAPT / PAT） <a class="header-anchor" href="#_3-网络地址与端口转换-napt-pat" aria-label="Permalink to &quot;3. 网络地址与端口转换（NAPT / PAT）&quot;">​</a></h3><p>即 <strong>端口地址转换（Port Address Translation, PAT）</strong>，多个私有 IP 地址通过 <strong>同一个公网 IP</strong>，但使用 <strong>不同端口</strong> 进行通信。</p><blockquote><p><strong>典型应用</strong>：家庭和公司路由器使用 NAT，让局域网内的多个设备共享一个公网 IP 访问互联网。</p></blockquote><h2 id="nat-在-linux-中的实现" tabindex="-1">NAT 在 Linux 中的实现 <a class="header-anchor" href="#nat-在-linux-中的实现" aria-label="Permalink to &quot;NAT 在 Linux 中的实现&quot;">​</a></h2><p>在 Linux 系统中，NAT 主要通过 <strong>iptables</strong> 实现，使用 <code>nat</code> 表进行地址转换。</p><p>详细参考：<a href="./.html">iptables NAT 配置</a></p><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><p>[^1]: RFC 2663 - IP Network Address Translator (NAT) Specification. <a href="https://tools.ietf.org/html/rfc2663" target="_blank" rel="noreferrer">链接</a> [^2]: RFC 1918 - Address Allocation for Private Internets. <a href="https://datatracker.ietf.org/doc/html/rfc1918" target="_blank" rel="noreferrer">链接</a></p>',24)]))}const u=t(o,[["render",i]]);export{p as __pageData,u as default};

import{_ as i,c as l,o,ae as t}from"./chunks/framework.BHrE6nLq.js";const s=JSON.parse('{"title":"BGP 属性与选路原则","description":"","frontmatter":{},"headers":[],"relativePath":"network/tcpip/layer3/bgp_attribute.md","filePath":"network/tcpip/layer3/bgp_attribute.md"}'),c={name:"network/tcpip/layer3/bgp_attribute.md"};function r(d,e,p,a,g,b){return o(),l("div",null,e[0]||(e[0]=[t('<h1 id="bgp-属性与选路原则" tabindex="-1">BGP 属性与选路原则 <a class="header-anchor" href="#bgp-属性与选路原则" aria-label="Permalink to &quot;BGP 属性与选路原则&quot;">​</a></h1><blockquote><p>前提：(路由的下一跳可达、关闭同步、路由没有被惩罚、前缀没有被入境路由策略拒绝)，具体原则如下</p></blockquote><h2 id="bgp-选路原则" tabindex="-1">bgp 选路原则 <a class="header-anchor" href="#bgp-选路原则" aria-label="Permalink to &quot;bgp 选路原则&quot;">​</a></h2><ol><li>weight（cisco私有属性）大优先，本地有效。 <ul><li>本地始发路由 <code>weight</code> 为 32768</li><li><code>peer</code> 学习过的路由 <code>weight</code> 为 0</li><li>仅本路由器有效 <code>neighbor 12.1.1.2 weight 200</code></li></ul></li><li>local preference 大优先，这个参数在<strong>本 AS 内传递</strong>。 <ul><li><code>local preference</code> 属性只能在 <code>ibgp peer</code> 之间传递 <ul><li>IN：修改别人发送给自己的 <code>local-pref</code>，影响自己</li><li>OUT：修改发送给别人的 <code>local-pref</code>，影响别人（ibgp peer）</li></ul></li><li>由于<strong>仅在 AS 内传递</strong> <code>ebgp</code> 针对 <code>in</code> 方向有效，出方向不发送 <code>local preference</code></li></ul></li><li>本地始发 <code>network &gt; redistribute &gt; aggregate</code>（华为设备略有区别 手动聚合路由&gt;自动聚合路由&gt;network&gt;import-route） <ul><li>本地始发 next-hop 为 0.0.0.0</li><li>weight 为 32768</li></ul></li><li>as-path 路径，短优先 <ul><li>可配置 <code>bgp bestpath as-path ignore</code> 来忽略这一步</li><li>聚合路由时 <code>aggregate-address as-set</code> 后产生的 as-path 列表中的{} as 号只算一个 as 号的长度。</li><li>松散模式： <code>bestpath as-path multipath-relax</code> 松散模式长度相同即可负载（第九条）</li><li>严谨模式：默认为严谨模式 <strong>AS路径必须完全相同才能进行负载（第九条）</strong>。</li></ul></li><li>origin 属性 <ul><li><code>igp &gt; egp &gt; incomplete</code>，origin 属性会一直在 <code>bgp</code> 路由中携带</li><li>很少使用设置 origin 属性作为 bgp 路由选路策略</li></ul></li><li>med(Multi-Exit Discriminators)，小优先 <ul><li>默认比较来自同一 <code>as bgp</code> 路由的 <code>med</code> 值。</li><li>命令 <code>bgp always-compare-med</code> 不考虑是否来自同一AS。（ebpg 只传递一次）</li><li>从 ibgp 学来的路由携带的 med 发送给 ebgp 前会清空掉 med</li><li>如果 network 或 redistribute 导入到 <code>bgp</code> 且 来源是 IGP 那么 bgp med 复制 IGP metric。</li><li>如果 network 或 redistribute 导入到 <code>bgp</code> 且 来源是直连 那么 bgp med 为 0</li><li>如果 <code>aggregate</code> 注入路由，bgp med 不被设置</li></ul></li><li>ebgp 优于 ibgp <ul><li>ebgp 优于联邦 ebgp（联邦 ebgp 和联邦 ibgp 不具有可比性，不比较。因为联邦 ebgp 和联邦 ibgp 都被看做内部路径没有差别）。</li></ul></li><li>bgp 优选下一跳 igp 度量值低的路径。 <ul><li><code>ebgp peer</code> 和 <code>ibgp peer</code> 和联邦 <code>ebgp</code> 和联邦 <code>ibgp</code> 都比较这一步</li></ul></li><li>负载均衡 <ul><li>默认只对 ebgp 负载</li><li><code>ibgp</code> 负载 <code>maximum-paths ibgp &lt;1-16&gt;</code></li><li>如果没有 ibgp 关键字，仅对 ebgp 对等体收到路由负载均衡</li></ul></li><li>ebgp 越老越优先 <ul><li>如果 <code>bgp</code> 进程下使用 <code>bgp bestpath compare-routerid</code> 命令，则忽略本原则</li></ul></li><li>最小 <code>route id</code><ul><li>如果路径包含 RR 属性，那么在路径选择过程中就用 originator-id 来代替 router-id 进行比较（就是 originator-id 之间进行比较）。</li></ul></li><li>cluster-list <ul><li>如果 orginator-id 相同，那么 bgp 优选 cluster-list 最短路径</li><li>这种情况只出现在 RR 的环境中</li></ul></li><li>最小邻居地址</li><li>bgp cost community( bgp 成本团体) <ul><li>在第8条之后。成本团体设置子句使用 cost communityID（成本团体 ID 编号0到255）和 cost number （成本编号值0到4,294,967,295）进行了配置。先比 cost number 后比较 cost communityID，都是越低越优先</li><li>对于未用成本编号值专门配置的路径，将指定默认成本编号值为2,147,483,647。 此值是0和4,294,967,295之间的中央点。这个属性传递给邻居时要有send-community 命令。这个团体属性为非传递的扩展团体属性。会传递给 ibgp 和联邦 ibgp 和 ebgp 对等体，不会传递给 ebgp 对等体。</li></ul></li></ol><h3 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h3><hr>',6)]))}const n=i(c,[["render",r]]);export{s as __pageData,n as default};

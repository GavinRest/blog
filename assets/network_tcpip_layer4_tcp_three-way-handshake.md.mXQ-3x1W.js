import{_ as t,c as p,o as a,ae as c}from"./chunks/framework.BHrE6nLq.js";const o="/images/tcpip/layer4/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png",h=JSON.parse('{"title":"tcp三次握手","description":"","frontmatter":{},"headers":[],"relativePath":"network/tcpip/layer4/tcp_three-way-handshake.md","filePath":"network/tcpip/layer4/tcp_three-way-handshake.md"}'),r={name:"network/tcpip/layer4/tcp_three-way-handshake.md"};function n(s,e,l,_,i,d){return a(),p("div",null,e[0]||(e[0]=[c('<h1 id="tcp三次握手" tabindex="-1">tcp三次握手 <a class="header-anchor" href="#tcp三次握手" aria-label="Permalink to &quot;tcp三次握手&quot;">​</a></h1><blockquote><p>三次握手是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。三次握手的目的是连接服务器指定端口，建立 TCP 连接，并同步连接双方的序列号和确认号，交换 TCP 窗口、MSS等信息。在 socket 编程中，客户端执行 connect() 时将触发三次握手。</p></blockquote><ul><li><p>第一次握手(SYN=1, seq=x):</p><p>客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。</p><p>发送完毕后，客户端进入 <code>SYN_SEND</code> 状态。</p></li><li><p>第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):</p><p>服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 <code>SYN_RCVD</code> 状态。</p></li><li><p>第三次握手(ACK=1，ACKnum=y+1)</p><p>客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1发送完毕后，客户端进入 <code>ESTABLISHED</code> 状态，当服务器端接收到这个包时，也进入 <code>ESTABLISHED</code> 状态，TCP 握手结束。</p></li></ul><p>三次握手的过程的示意图如下：</p><p><img src="'+o+'" alt="tcp三次握手"></p>',5)]))}const m=t(r,[["render",n]]);export{h as __pageData,m as default};

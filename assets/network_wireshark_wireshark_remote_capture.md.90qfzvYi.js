import{_ as a,c as e,o as n,ae as t}from"./chunks/framework.BHrE6nLq.js";const p="/images/wireshark/wireshark_pipe.png",i="/images/wireshark/wireshark_sshdump_display_interface.png",r="/images/wireshark/wireshark_sshdump_config.png",l="/images/wireshark/wireshark_sshdump_capture.png",g=JSON.parse('{"title":"wireshark 远程分析","description":"","frontmatter":{},"headers":[],"relativePath":"network/wireshark/wireshark_remote_capture.md","filePath":"network/wireshark/wireshark_remote_capture.md"}'),o={name:"network/wireshark/wireshark_remote_capture.md"};function c(h,s,d,u,m,k){return n(),e("div",null,s[0]||(s[0]=[t(`<h1 id="wireshark-远程分析" tabindex="-1">wireshark 远程分析 <a class="header-anchor" href="#wireshark-远程分析" aria-label="Permalink to &quot;wireshark 远程分析&quot;">​</a></h1><p>远程抓包 down 到本地分析相对会比较麻烦，有些场景需要本地 wireshark 时时分析 remote server 数据包。主要有以下三种方法。</p><h3 id="一、匿名管道" tabindex="-1">一、匿名管道 <a class="header-anchor" href="#一、匿名管道" aria-label="Permalink to &quot;一、匿名管道&quot;">​</a></h3><p>ssh + wireshark + tcpdump</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ssh root@172.16.147.136 &quot;tcpdump -s0 -w- -i ens38 &#39;not port 22&#39;&quot; | wireshark -k -i -</span></span>
<span class="line"><span>    -s snaplen</span></span>
<span class="line"><span>      --snapshot-length=snaplen</span></span>
<span class="line"><span>	-w- 告诉 tcpdump 将二进制数据写入 stdout</span></span></code></pre></div><h3 id="二、命名管道" tabindex="-1">二、命名管道 <a class="header-anchor" href="#二、命名管道" aria-label="Permalink to &quot;二、命名管道&quot;">​</a></h3><ul><li>创建一个命名管道</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkfifo /tmp/remote</span></span></code></pre></div><ul><li>管道读取方式1：cli 读取</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>wireshark -k -i /tmp/remote</span></span>
<span class="line"><span>  -k  start capturing immediately (def: do nothing)</span></span>
<span class="line"><span>  -i &lt;interface&gt;, --interface &lt;interface&gt;</span></span></code></pre></div><ul><li>管道读取方式2：gui 读取</li></ul><p><img src="`+p+`" alt="wireshark_pipe"></p><ul><li>ssh tcpdump 将数据包重定向到命名管道</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ssh root@172.16.147.136 &quot;tcpdump -s0 -n -w- -i ens38&quot; &gt; /tmp/remote</span></span>
<span class="line"><span>  -s snaplen</span></span>
<span class="line"><span>    --snapshot-length=snaplen</span></span>
<span class="line"><span>  -w- 告诉 tcpdump 将二进制数据写入 stdout</span></span>
<span class="line"><span>    -i &lt;interface&gt;, --interface &lt;interface&gt;</span></span>
<span class="line"><span>    -n Don&#39;t convert addresses (i.e., host addresses, port numbers, etc.) to names.</span></span></code></pre></div><h3 id="三、sshdump" tabindex="-1">三、sshdump <a class="header-anchor" href="#三、sshdump" aria-label="Permalink to &quot;三、sshdump&quot;">​</a></h3><ul><li>显示所有接口，点击齿轮配置 sshdump</li></ul><p><img src="`+i+'" alt="sshdump_display_interface"></p><ul><li>配置 sshdump 认证（切换混杂模式需要 root 权限，所以需要以root身份登录）</li></ul><p><img src="'+r+'" alt="wireshark_sshdump_config"></p><ul><li>配置 capture</li></ul><p><img src="'+l+'" alt="wireshark_sshdump_capture"></p>',21)]))}const w=a(o,[["render",c]]);export{g as __pageData,w as default};

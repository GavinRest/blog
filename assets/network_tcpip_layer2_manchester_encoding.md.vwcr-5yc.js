import{_ as t,c as l,o as a,ae as e}from"./chunks/framework.BHrE6nLq.js";const r="/images/tcpip/layer2/Manchester_encoding_both_conventions.png",u=JSON.parse('{"title":"曼彻斯特编码","description":"","frontmatter":{},"headers":[],"relativePath":"network/tcpip/layer2/manchester_encoding.md","filePath":"network/tcpip/layer2/manchester_encoding.md"}'),i={name:"network/tcpip/layer2/manchester_encoding.md"};function n(s,o,c,p,d,g){return a(),l("div",null,o[0]||(o[0]=[e('<h1 id="曼彻斯特编码" tabindex="-1">曼彻斯特编码 <a class="header-anchor" href="#曼彻斯特编码" aria-label="Permalink to &quot;曼彻斯特编码&quot;">​</a></h1><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>在网络通信的世界里，数据的传输是基础。而如何将数据高效、准确地从一端传递到另一端，一直是工程师们研究的重点。今天，我们要聊的是一种经典的编码方式——曼彻斯特编码（Manchester Encoding）。如今也是<strong>网络规划师</strong>考试中的考点。</p><h2 id="nrz-不归零编码-最初的信号用高低电平跳变表示" tabindex="-1">NRZ 不归零编码：最初的信号用高低电平跳变表示 <a class="header-anchor" href="#nrz-不归零编码-最初的信号用高低电平跳变表示" aria-label="Permalink to &quot;NRZ 不归零编码：最初的信号用高低电平跳变表示&quot;">​</a></h2><p>在数字通信早期，工程师们使用简单的电平信号来表示数据。比如，高电平（High）代表“1”，低电平（Low）代表“0”。这种方式看似简单，但在实际应用中却遇到了一个棘手的问题：<strong>时钟同步</strong>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>白话文解释时钟同步问题：想象你在打拍子，每次打一下代表一个数据比特。打一下代表1，不打代表0。如果每一拍都清楚无误，别人可以听出你的节奏，知道你是 1 还是 0。</p><p>但是如果你连续多个“1”或者“0”，比如这样 “111000”别人就只能听到连续的声音或者连续的静默，这时就很容易搞混，拍子没法同步了</p></div><h2 id="曼彻斯特编码的诞生" tabindex="-1">曼彻斯特编码的诞生 <a class="header-anchor" href="#曼彻斯特编码的诞生" aria-label="Permalink to &quot;曼彻斯特编码的诞生&quot;">​</a></h2><p>为了解决时钟同步的问题，曼彻斯特编码应运而生。它的核心思想是：<strong>在每个比特的中间引入一次电平跳变(它在每个比特中间强制“打一次拍子”！)</strong>。具体来说：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>曼彻斯特编码可以根据标准不同而变化，不同场景可能采用不同定义<strong>并非固定</strong>。IEEE 802.3 以太网标准中常用的曼彻斯特编码如下。</p></div><ul><li><p>以太网 <code>IEEE 802.3</code> 曼彻斯特编码规则：通过这种方式，每个比特的传输都自带一次电平跳变，接收端可以通过检测这些跳变来同步时钟，从而准确地解码数据。</p><ul><li><strong>“1”</strong>：从低电平到高电平的跳变代表1</li><li><strong>“0”</strong>：从高电平到低电平的跳变代表0</li></ul></li></ul><h3 id="举个-🌰" tabindex="-1">举个“🌰” <a class="header-anchor" href="#举个-🌰" aria-label="Permalink to &quot;举个“🌰”&quot;">​</a></h3><p>下图展示了<strong>曼彻斯特编码</strong>数据传输示例，同时对比了不同标准的曼彻斯特编码（G. E. Thomas 版本 和 IEEE 802.3 版本）。图中还包含了 <code>Clock</code>（时钟信号）和 <code>Data</code>（原始数据）的波形。<code>Clock</code> 是辅助 <code>Data</code> 解析<code>NRZ</code> 编码内容。</p><ul><li><p><strong>Data（原始数据）</strong></p><ul><li>原始数据的波形，表示传输内容 <code>10100111001</code>。</li><li>数据用简单的高电平（1）和低电平（0）表示。</li></ul></li><li><p><strong>曼彻斯特编码表示</strong>：分别用两种版本表示了 <code>10100111001</code></p><ul><li><strong>G. E. Thomas 版本</strong>： <ul><li>1：高电平 → 低电平</li><li>0：低电平 → 高电平</li></ul></li><li><strong>IEEE 802.3 版本</strong>： <ul><li>1：低电平 → 高电平</li><li>0：高电平 → 低电平</li></ul></li></ul></li></ul><p><img src="'+r+'" alt="Manchester编码"></p><h2 id="曼彻斯特编码优缺点" tabindex="-1">曼彻斯特编码优缺点 <a class="header-anchor" href="#曼彻斯特编码优缺点" aria-label="Permalink to &quot;曼彻斯特编码优缺点&quot;">​</a></h2><ul><li><p>优点</p><ol><li><strong>自同步</strong>：曼彻斯特编码优势在于它自带时钟信息，接收端可以通过电平跳变来同步时钟。</li><li><strong>抗干扰能力强</strong>：由于每个比特都有电平跳变，即使传输过程中出现干扰，接收端也能通过跳变来恢复数据。</li><li><strong>简单易实现</strong>：曼彻斯特编码的规则简单，硬件实现相对容易，因此在早期的网络通信中得到了广泛应用。</li></ol></li><li><p>缺点</p><ol><li><p><strong>带宽利用率低</strong>：由于每个比特都需要一次电平跳变，曼彻斯特编码的带宽利用率较低。这意味着在相同的带宽下，曼彻斯特编码传输的数据量较少。</p></li><li><p><strong>不适合高速传输</strong>：随着网络速度的提升，曼彻斯特编码的效率问题变得更加明显。因此，在现代高速网络中，曼彻斯特编码逐渐被更高效的编码方式所取代。</p></li></ol></li></ul><h2 id="曼彻斯特编码在网络规划师考试中的重要性" tabindex="-1">曼彻斯特编码在网络规划师考试中的重要性 <a class="header-anchor" href="#曼彻斯特编码在网络规划师考试中的重要性" aria-label="Permalink to &quot;曼彻斯特编码在网络规划师考试中的重要性&quot;">​</a></h2><p>对于网络规划师考试来说，曼彻斯特编码是一个重要的考点。考生需要掌握以下几点：</p><ol><li><p><strong>编码原理</strong>：理解曼彻斯特编码的基本原理，能够根据给定的数据绘制出曼彻斯特编码的波形。</p></li><li><p><strong>同步机制</strong>：理解曼彻斯特编码如何通过电平跳变实现时钟同步。</p></li><li><p><strong>优缺点分析</strong>：能够分析曼彻斯特编码的优缺点，并理解其在网络通信中的应用场景。</p></li><li><p><strong>与其他编码方式的对比</strong>：了解曼彻斯特编码与其他编码方式（如差分曼彻斯特编码、NRZ编码等）的区别和适用场景。</p></li></ol><h2 id="结语" tabindex="-1">结语 <a class="header-anchor" href="#结语" aria-label="Permalink to &quot;结语&quot;">​</a></h2><p>曼彻斯特编码虽然已经不再是主流编码方式，但它在网络通信发展史上的地位不可忽视。除了曼彻斯特编码还有<strong>差分曼彻斯特编码</strong>与 <strong>MLT-3编码</strong>需要考生学习了解，最后希望读者能更好理解曼彻斯特编码，并在网络规划师考试中取得好成绩！</p>',21)]))}const m=t(i,[["render",n]]);export{u as __pageData,m as default};

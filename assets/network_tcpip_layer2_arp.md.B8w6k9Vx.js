import{_ as r,c as t,o as e,ae as o}from"./chunks/framework.BHrE6nLq.js";const p="/images/tcpip/layer2/arp_request_response.png",i="/images/tcpip/layer2/arp_gratuitous.png",R=JSON.parse('{"title":"ARP 地址解析协议","description":"","frontmatter":{},"headers":[],"relativePath":"network/tcpip/layer2/arp.md","filePath":"network/tcpip/layer2/arp.md"}'),s={name:"network/tcpip/layer2/arp.md"};function l(c,a,n,u,P,_){return e(),t("div",null,a[0]||(a[0]=[o('<h1 id="arp-地址解析协议" tabindex="-1">ARP 地址解析协议 <a class="header-anchor" href="#arp-地址解析协议" aria-label="Permalink to &quot;ARP 地址解析协议&quot;">​</a></h1><blockquote><p>ARP 协议最初定义于 1982 年发布的 RFC 826 中。在 IPv6 网络中，ARP 已被 NDP（邻居发现协议）所取代，因此 ARP 的使用场景将逐渐减少。</p></blockquote><p>在 IPv4 网络中，地址解析协议（Address Resolution Protocol）用于将 IP 地址解析为 MAC 地址。该协议由 RFC 826 定义，其解析过程仅涉及两种数据包：ARP 请求和 ARP 响应。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在Windows、linux、macos 中，可以通过 <code>arp -a</code>来查看ARP 表。</p></div><h3 id="arp-请求与响应过程" tabindex="-1">ARP 请求与响应过程 <a class="header-anchor" href="#arp-请求与响应过程" aria-label="Permalink to &quot;ARP 请求与响应过程&quot;">​</a></h3><p><img src="'+p+'" alt="arp_request_response"></p><h3 id="gratuitous-arp-无故-arp" tabindex="-1">Gratuitous ARP (无故 ARP) <a class="header-anchor" href="#gratuitous-arp-无故-arp" aria-label="Permalink to &quot;Gratuitous ARP (无故 ARP)&quot;">​</a></h3><ul><li>自问自答避免IP冲突</li><li>可用于更新 ARP 表（尤其在设备变更 MAC 地址或网络重启时）。</li><li>部分设备（如路由器）会使用 Gratuitous ARP 来通告其自身的 IP 地址。</li></ul><p><img src="'+i+'" alt="arp_gratuitous"></p><h3 id="rarp" tabindex="-1">RARP <a class="header-anchor" href="#rarp" aria-label="Permalink to &quot;RARP&quot;">​</a></h3><p>提供 ARP 反向映射的协议称为RARP,它用于缺少磁盘驱动器(通常是无盘工作站)的系统。它在当前已很少使用,而且需要系统管理员手功配置。详情见 [<a href="https://tools.ietf.org/html/rfc903" target="_blank" rel="noreferrer">rfc903</a>]</p>',11)]))}const A=r(s,[["render",l]]);export{R as __pageData,A as default};

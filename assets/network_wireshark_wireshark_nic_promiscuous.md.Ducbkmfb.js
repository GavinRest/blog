import{_ as a,c as n,o as e,ae as p}from"./chunks/framework.BHrE6nLq.js";const t="/images/wireshark/wireshark_promiscuous.png",k=JSON.parse('{"title":"wireshark 网卡混杂模式","description":"","frontmatter":{},"headers":[],"relativePath":"network/wireshark/wireshark_nic_promiscuous.md","filePath":"network/wireshark/wireshark_nic_promiscuous.md"}'),i={name:"network/wireshark/wireshark_nic_promiscuous.md"};function r(l,s,c,o,d,h){return e(),n("div",null,s[0]||(s[0]=[p('<h1 id="wireshark-网卡混杂模式" tabindex="-1">wireshark 网卡混杂模式 <a class="header-anchor" href="#wireshark-网卡混杂模式" aria-label="Permalink to &quot;wireshark 网卡混杂模式&quot;">​</a></h1><p>​ 混杂模式是一种允许网卡能够查看到所有数据包的驱动模式。在混杂模式下，网卡将会把每一个它所看到的数据包都传递给主机的处理器， 而无论数据包的目的地址是什么。一旦数据包到达 CPU，它就可以被一个数据 包嗅探软件捕获并进行分析。Wireshark 使用 libpcap / WinPcap 驱动，将网卡直接切换到混杂模式。关闭混杂模式就是要抑制 <strong>未知单播</strong>，仅允许目的 mac 是自身或者<strong>广播/组播报文</strong>。</p><ul><li>未知单播：交换机起动时，MAC地址表为空，如果此时A主机发送一个帧给主机B，那么当交换机接受此帧的时，查看源地址（主机A），并将它添加到MAC地址表中，但是交换机并不知道主机B在哪个端口，所以交换机会泛洪这个帧。</li></ul><h3 id="混在模式简介" tabindex="-1">混在模式简介 <a class="header-anchor" href="#混在模式简介" aria-label="Permalink to &quot;混在模式简介&quot;">​</a></h3><hr><ul><li>wireshark 开启/关闭混杂模式</li></ul><p><img src="'+t+`" alt="wireshark_promiscuous"></p><h3 id="linux-网卡模式简介" tabindex="-1">linux 网卡模式简介 <a class="header-anchor" href="#linux-网卡模式简介" aria-label="Permalink to &quot;linux 网卡模式简介&quot;">​</a></h3><hr><ul><li>ifconfig 简介</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root@client:~# ifconfig ens38</span></span>
<span class="line"><span>ens38     Link encap:Ethernet  HWaddr 00:0c:29:6a:87:11  </span></span>
<span class="line"><span>          inet addr:10.10.2.2  Bcast:10.10.2.3  Mask:255.255.255.252</span></span>
<span class="line"><span>          inet6 addr: fe80::20c:29ff:fe6a:8711/64 Scope:Link</span></span>
<span class="line"><span>          UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1</span></span>
<span class="line"><span>          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span></span>
<span class="line"><span>          TX packets:18 errors:0 dropped:0 overruns:0 carrier:0</span></span>
<span class="line"><span>          collisions:0 txqueuelen:1000 </span></span>
<span class="line"><span>          RX bytes:0 (0.0 B)  TX bytes:1476 (1.4 KB)</span></span></code></pre></div><ul><li>字段描述 <a href="http://linux-ip.net/html/tools-ifconfig.html" target="_blank" rel="noreferrer">^1</a></li></ul><table tabindex="0"><thead><tr><th>Flag</th><th>Description</th></tr></thead><tbody><tr><td>UP</td><td>device is functioning</td></tr><tr><td>BROADCAST</td><td>device can send traffic to all hosts on the link</td></tr><tr><td>RUNNING</td><td>???</td></tr><tr><td>MULTICAST</td><td>device can perform and receive multicast packets</td></tr><tr><td>ALLMULTI</td><td>device receives all multicast packets on the link</td></tr><tr><td>PROMISC</td><td>device receives all traffic on the link</td></tr></tbody></table><ul><li>linux 设置/取消混杂模式</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 开启混杂模式</span></span>
<span class="line"><span>ifconfig eth0 promisc </span></span>
<span class="line"><span>ens38     Link encap:Ethernet  HWaddr 00:0c:29:6a:87:11  </span></span>
<span class="line"><span>          inet addr:10.10.2.2  Bcast:10.10.2.3  Mask:255.255.255.252</span></span>
<span class="line"><span>          inet6 addr: fe80::20c:29ff:fe6a:8711/64 Scope:Link</span></span>
<span class="line"><span>          UP BROADCAST RUNNING PROMISC MULTICAST  MTU:1500  Metric:1</span></span>
<span class="line"><span>          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span></span>
<span class="line"><span>          TX packets:18 errors:0 dropped:0 overruns:0 carrier:0</span></span>
<span class="line"><span>          collisions:0 txqueuelen:1000 </span></span>
<span class="line"><span>          RX bytes:0 (0.0 B)  TX bytes:1476 (1.4 KB)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 关闭混杂模式</span></span>
<span class="line"><span>ifconfig eth0 -promisc</span></span>
<span class="line"><span>ens38     Link encap:Ethernet  HWaddr 00:0c:29:6a:87:11  </span></span>
<span class="line"><span>          inet addr:10.10.2.2  Bcast:10.10.2.3  Mask:255.255.255.252</span></span>
<span class="line"><span>          inet6 addr: fe80::20c:29ff:fe6a:8711/64 Scope:Link</span></span>
<span class="line"><span>          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1</span></span>
<span class="line"><span>          RX packets:0 errors:0 dropped:0 overruns:0 frame:0</span></span>
<span class="line"><span>          TX packets:18 errors:0 dropped:0 overruns:0 carrier:0</span></span>
<span class="line"><span>          collisions:0 txqueuelen:1000 </span></span>
<span class="line"><span>          RX bytes:0 (0.0 B)  TX bytes:1476 (1.4 KB)</span></span></code></pre></div><h3 id="未知问题-已解决" tabindex="-1">未知问题（已解决） <a class="header-anchor" href="#未知问题-已解决" aria-label="Permalink to &quot;未知问题（已解决）&quot;">​</a></h3><hr><p>按《wireshark 数据包分析实战》描述，关闭混杂模式应该收不到目的 mac 地址不是自己的报文，不清楚为啥还能收到广播包。</p><ul><li>tcpdump 描述：</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>--no-promiscuous-mode</span></span>
<span class="line"><span>              Don&#39;t put the interface into promiscuous mode.  Note that the interface might be in promiscuous mode for some other reason; hence, \`-p&#39; cannot be used as an abbreviation for \`ether host {local-hw-addr} or ether broadcast&#39;.</span></span></code></pre></div><ul><li>客户端测试</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root@client:~# socat STDIO UDP4-DATAGRAM:10.10.2.3:6666,broadcast</span></span>
<span class="line"><span>1</span></span></code></pre></div><ul><li>服务端抓包 (-p)</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root@router:/home/ubuntu# tcpdump -i ens39 -p udp -e</span></span>
<span class="line"><span>tcpdump: verbose output suppressed, use -v or -vv for full protocol decode</span></span>
<span class="line"><span>listening on ens39, link-type EN10MB (Ethernet), capture size 262144 bytes</span></span>
<span class="line"><span>22:56:03.225065 00:0c:29:6a:87:11 (oui Unknown) &gt; Broadcast, ethertype IPv4 (0x0800), length 60: 10.10.2.2.50726 &gt; 10.10.2.3.6666: UDP, length 1</span></span></code></pre></div><h3 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h3><hr>`,26)]))}const b=a(i,[["render",r]]);export{k as __pageData,b as default};

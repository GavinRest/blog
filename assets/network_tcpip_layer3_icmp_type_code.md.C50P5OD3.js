import{_ as o,c as d,o as a,ae as c}from"./chunks/framework.BHrE6nLq.js";const u=JSON.parse('{"title":"ICMP 协议","description":"","frontmatter":{},"headers":[],"relativePath":"network/tcpip/layer3/icmp_type_code.md","filePath":"network/tcpip/layer3/icmp_type_code.md"}'),l={name:"network/tcpip/layer3/icmp_type_code.md"};function t(i,e,r,n,s,p){return a(),d("div",null,e[0]||(e[0]=[c('<h1 id="icmp-协议" tabindex="-1">ICMP 协议 <a class="header-anchor" href="#icmp-协议" aria-label="Permalink to &quot;ICMP 协议&quot;">​</a></h1><h2 id="_1-icmp-类型-type-与代码-code" tabindex="-1">1. ICMP 类型（Type）与代码（Code） <a class="header-anchor" href="#_1-icmp-类型-type-与代码-code" aria-label="Permalink to &quot;1. ICMP 类型（Type）与代码（Code）&quot;">​</a></h2><p>在 ICMP（Internet Control Message Protocol，互联网控制消息协议）中，每个 ICMP 报文都包含两个重要字段：<strong>类型（Type）</strong> 和 <strong>代码（Code）</strong>。它们用于区分不同的 ICMP 消息类型，并进一步提供更详细的错误或状态信息。</p><h3 id="_1-1-type-类型" tabindex="-1"><strong>1.1 Type（类型）</strong> <a class="header-anchor" href="#_1-1-type-类型" aria-label="Permalink to &quot;**1.1 Type（类型）**&quot;">​</a></h3><ul><li><code>Type</code> 字段表示 ICMP 消息的主要类别，用于指明该消息的用途。例如： <ul><li><code>Type 0</code>：表示 <strong>Echo Reply（回显应答，Ping 应答）</strong>。</li><li><code>Type 3</code>：表示 <strong>Destination Unreachable（目标不可达）</strong>，用于通知数据包无法到达目的地。</li><li><code>Type 8</code>：表示 <strong>Echo Request（回显请求，Ping 请求）</strong>，通常用于 <code>ping</code> 命令。</li><li><code>Type 11</code>：表示 <strong>Time Exceeded（超时）</strong>，用于指示数据包在传输过程中 TTL（生存时间）归零。</li></ul></li></ul><h3 id="_1-2-code-代码" tabindex="-1"><strong>1.2 Code（代码）</strong> <a class="header-anchor" href="#_1-2-code-代码" aria-label="Permalink to &quot;**1.2 Code（代码）**&quot;">​</a></h3><ul><li><code>Code</code> 字段是 <code>Type</code> 字段的细化扩展，它提供了更具体的错误或控制信息。例如： <ul><li>当 <code>Type = 3</code>（Destination Unreachable，目标不可达）时： <ul><li><code>Code 0</code>：<strong>Network Unreachable（网络不可达）</strong></li><li><code>Code 1</code>：<strong>Host Unreachable（主机不可达）</strong></li><li><code>Code 3</code>：<strong>Port Unreachable（端口不可达）</strong></li></ul></li><li>当 <code>Type = 11</code>（Time Exceeded，超时）时： <ul><li><code>Code 0</code>：<strong>TTL equals 0 during transit（传输过程中 TTL 归零）</strong></li><li><code>Code 1</code>：<strong>TTL equals 0 during reassembly（数据报组装过程中 TTL 归零）</strong></li></ul></li></ul></li></ul><h3 id="_1-3-type-与-code-结合示例" tabindex="-1"><strong>1.3 Type 与 Code 结合示例</strong> <a class="header-anchor" href="#_1-3-type-与-code-结合示例" aria-label="Permalink to &quot;**1.3 Type 与 Code 结合示例**&quot;">​</a></h3><p>ICMP 消息的 <code>Type</code> 和 <code>Code</code> 结合使用，以明确指示网络状态。例如：</p><ul><li><strong>Ping（ICMP Echo Request &amp; Reply）</strong><ul><li><code>Type 8, Code 0</code>：发送 Ping 请求</li><li><code>Type 0, Code 0</code>：Ping 响应</li></ul></li><li><strong>目标不可达（Destination Unreachable）</strong><ul><li><code>Type 3, Code 1</code>：主机不可达</li><li><code>Type 3, Code 3</code>：端口不可达</li></ul></li><li><strong>TTL 超时（Time Exceeded）</strong><ul><li><code>Type 11, Code 0</code>：数据包在传输过程中 TTL 归零（用于 <code>traceroute</code>）</li></ul></li></ul><p>通过 <code>Type</code> 和 <code>Code</code>，ICMP 能够精确传递网络状态和故障信息，帮助诊断和优化网络连接。</p><h2 id="_2-说明与补充" tabindex="-1">2. 说明与补充 <a class="header-anchor" href="#_2-说明与补充" aria-label="Permalink to &quot;2. 说明与补充&quot;">​</a></h2><h3 id="_2-1-ping-icmp-echo-request-reply" tabindex="-1">2.1 Ping（ICMP Echo Request &amp; Reply） <a class="header-anchor" href="#_2-1-ping-icmp-echo-request-reply" aria-label="Permalink to &quot;2.1 Ping（ICMP Echo Request &amp; Reply）&quot;">​</a></h3><ul><li><code>Type 8, Code 0</code>：表示 ICMP 回显请求（Echo Request），即 <code>ping</code> 命令的请求数据包。</li><li><code>Type 0, Code 0</code>：表示 ICMP 回显应答（Echo Reply），即 <code>ping</code> 的响应数据包。</li></ul><h3 id="_2-2-目标不可达-destination-unreachable" tabindex="-1">2.2 目标不可达（Destination Unreachable） <a class="header-anchor" href="#_2-2-目标不可达-destination-unreachable" aria-label="Permalink to &quot;2.2 目标不可达（Destination Unreachable）&quot;">​</a></h3><ul><li><code>Type 3</code> 代码中，<code>Code 0</code>-<code>Code 15</code> 涵盖了各种不可达情况，如主机、网络、协议、端口等。</li></ul><h3 id="_2-3-ttl-超时-time-exceeded" tabindex="-1">2.3 TTL 超时（Time Exceeded） <a class="header-anchor" href="#_2-3-ttl-超时-time-exceeded" aria-label="Permalink to &quot;2.3 TTL 超时（Time Exceeded）&quot;">​</a></h3><ul><li><code>Type 11, Code 0</code>：数据包在传输过程中 TTL 归零，通常用于 <code>traceroute</code> 路由追踪工具。</li><li><code>Type 11, Code 1</code>：数据报在重组过程中 TTL 归零。</li></ul><h3 id="_2-4-重定向-redirect" tabindex="-1">2.4 重定向（Redirect） <a class="header-anchor" href="#_2-4-重定向-redirect" aria-label="Permalink to &quot;2.4 重定向（Redirect）&quot;">​</a></h3><ul><li><code>Type 5</code> 相关代码用于指示主机或网络的 IP 路由需要更改。</li></ul><h3 id="_2-5-源端被关闭-source-quench" tabindex="-1">2.5 源端被关闭（Source Quench） <a class="header-anchor" href="#_2-5-源端被关闭-source-quench" aria-label="Permalink to &quot;2.5 源端被关闭（Source Quench）&quot;">​</a></h3><ul><li><code>Type 4</code> 旨在减少数据包发送速率，避免网络拥塞，但现代 IP 实现通常不会使用该机制。</li></ul><h3 id="_2-6-作废的类型-obsolete-types" tabindex="-1">2.6 作废的类型（Obsolete Types） <a class="header-anchor" href="#_2-6-作废的类型-obsolete-types" aria-label="Permalink to &quot;2.6 作废的类型（Obsolete Types）&quot;">​</a></h3><ul><li><code>Type 8</code> 以上部分类型已被废弃，例如 <code>Timestamp request/reply</code> 和 <code>Information request/reply</code>。</li></ul><hr><p>这样整理后，表格更整齐，结构更清晰，并补充了一些关键信息。</p>',26)]))}const T=o(l,[["render",t]]);export{u as __pageData,T as default};

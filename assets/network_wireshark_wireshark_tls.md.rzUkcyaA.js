import{_ as s,c as e,o as n,ae as l}from"./chunks/framework.BHrE6nLq.js";const p="/images/wireshark/wireshark_tls_secret.png",b=JSON.parse('{"title":"wireshark 解密 TLS","description":"","frontmatter":{},"headers":[],"relativePath":"network/wireshark/wireshark_tls.md","filePath":"network/wireshark/wireshark_tls.md"}'),t={name:"network/wireshark/wireshark_tls.md"};function i(o,a,r,c,d,h){return n(),e("div",null,a[0]||(a[0]=[l(`<h1 id="wireshark-解密-tls" tabindex="-1">wireshark 解密 TLS <a class="header-anchor" href="#wireshark-解密-tls" aria-label="Permalink to &quot;wireshark 解密 TLS&quot;">​</a></h1><blockquote><p>原理：获取 TLS 握手阶段生成的秘钥，通过 chrome DEBUG 日志中的握手信息生成秘钥</p></blockquote><h3 id="配置步骤" tabindex="-1">配置步骤 <a class="header-anchor" href="#配置步骤" aria-label="Permalink to &quot;配置步骤&quot;">​</a></h3><hr><ul><li><p>配置 chrome 输出 DEBUG 日志</p><ul><li><p>macos 添加临时环境变量</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir ~/sslkeylogfile &amp;&amp; touch ~/sslkeylogfile/key.log</span></span>
<span class="line"><span>export SSLKEYLOGFILE=~/sslkeylogfile/key.log</span></span></code></pre></div></li><li><p>macos 添加永久环境变量</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>#zsh</span></span>
<span class="line"><span>echo &quot;\\nexport SSLKEYLOGFILE=~/sslkeylogfile/key.log&quot; &gt;&gt; ~/.zshrc &amp;&amp; source ~/.zshrc</span></span></code></pre></div></li><li><p>检查</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 使用终端打开 chrome 并打开 https://www.baidu.com/</span></span>
<span class="line"><span>open &quot;/Applications/Google Chrome.app&quot;</span></span>
<span class="line"><span># 查看 key.log 文件</span></span>
<span class="line"><span>(venv3) ☁  sslkeylogfile [master] ⚡  cat ~/sslkeylogfile/key.log</span></span>
<span class="line"><span>CLIENT_HANDSHAKE_TRAFFIC_SECRET 9bd9c146254f587546805a6cb223c00a58d5e78574f9edbff98ebe9dad838d39 49e4a05e834f209603bf211a76c2b453f5c5e1d9910b5a5ad818f9b4baa2edb7</span></span>
<span class="line"><span>SERVER_HANDSHAKE_TRAFFIC_SECRET 9bd9c146254f587546805a6cb223c00a58d5e78574f9edbff98ebe9dad838d39 f4c7443aa20294ddfc750e9eb11acd4218d9f3d94157af9cb69fe9ed362cd994</span></span>
<span class="line"><span>CLIENT_TRAFFIC_SECRET_0 9bd9c146254f587546805a6cb223c00a58d5e78574f9edbff98ebe9dad838d39 1e041c85370549b439749d857eb9008d86aeaf5320fd556392a43fba40367d09</span></span></code></pre></div></li></ul></li><li><p>wireshark 配置解析 DEBUG 日志</p></li></ul><p><img src="`+p+'" alt="wireshark_tls_secret"></p>',6)]))}const f=s(t,[["render",i]]);export{b as __pageData,f as default};

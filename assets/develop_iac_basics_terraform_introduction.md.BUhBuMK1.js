import{_ as a,c as e,o as t,ae as i}from"./chunks/framework.BHrE6nLq.js";const m=JSON.parse('{"title":"Terraform 介绍","description":"","frontmatter":{},"headers":[],"relativePath":"develop/iac/basics/terraform_introduction.md","filePath":"develop/iac/basics/terraform_introduction.md"}'),o={name:"develop/iac/basics/terraform_introduction.md"};function s(l,r,n,p,h,d){return t(),e("div",null,r[0]||(r[0]=[i(`<h1 id="terraform-介绍" tabindex="-1">Terraform 介绍 <a class="header-anchor" href="#terraform-介绍" aria-label="Permalink to &quot;Terraform 介绍&quot;">​</a></h1><h2 id="什么是-terraform" tabindex="-1">什么是 Terraform？ <a class="header-anchor" href="#什么是-terraform" aria-label="Permalink to &quot;什么是 Terraform？&quot;">​</a></h2><p><strong>Terraform</strong> 是 <a href="https://www.hashicorp.com/" target="_blank" rel="noreferrer">HashiCorp</a> 开发的（IaC）工具，支持使用代码的方式定义、预览和管理基础设施。 它采用声明式配置语言（HCL，HashiCorp Configuration Language），用户只需定义<strong>目标状态</strong>，Terraform 就会自动计算并执行达到目标状态所需的变更步骤。</p><h2 id="terraform-核心特性" tabindex="-1">Terraform 核心特性 <a class="header-anchor" href="#terraform-核心特性" aria-label="Permalink to &quot;Terraform 核心特性&quot;">​</a></h2><h3 id="_1-多云与多平台支持" tabindex="-1">1. 多云与多平台支持 <a class="header-anchor" href="#_1-多云与多平台支持" aria-label="Permalink to &quot;1. 多云与多平台支持&quot;">​</a></h3><blockquote><p><a href="https://registry.terraform.io/browse/providers" target="_blank" rel="noreferrer">https://registry.terraform.io/browse/providers</a></p></blockquote><p>Terraform 提供 <strong>Provider 插件机制</strong>，可以统一管理不同平台的资源。例如：</p><ul><li>一份代码同时在 AWS 和 Azure 创建相同架构</li><li>同时管理本地 VMware 资源与云上的 Kubernetes 集群</li></ul><h3 id="_2-声明式配置" tabindex="-1">2. 声明式配置 <a class="header-anchor" href="#_2-声明式配置" aria-label="Permalink to &quot;2. 声明式配置&quot;">​</a></h3><p>Terraform 采用声明式定义：你只需要描述最终的基础设施状态，Terraform 会根据当前状态自动计算差异并执行修改。</p><div class="language-hcl vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">hcl</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resource</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;aws_instance&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> &quot;web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ami</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ami-123456&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  instance_type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;t2.micro&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上面的代码表示“我需要一台指定 AMI 和实例类型的 AWS EC2 实例”，Terraform 会决定是新建还是更新。</p><h3 id="_3-plan-apply-模式" tabindex="-1">3. Plan &amp; Apply 模式 <a class="header-anchor" href="#_3-plan-apply-模式" aria-label="Permalink to &quot;3. Plan &amp; Apply 模式&quot;">​</a></h3><ul><li><code>terraform plan</code>：预览即将执行的更改，不会直接修改资源</li><li><code>terraform apply</code>：实际执行更改，使基础设施达到配置文件描述的状态</li><li><code>terraform destroy</code>：销毁所有资源</li></ul><h2 id="terraform-工作流程" tabindex="-1">Terraform 工作流程 <a class="header-anchor" href="#terraform-工作流程" aria-label="Permalink to &quot;Terraform 工作流程&quot;">​</a></h2><p>Terraform 的执行流程大致分为 4 步：</p><ol><li><strong>编写配置</strong>：用 HCL 描述基础设施的目标状态</li><li><strong>初始化环境</strong>：<code>terraform init</code> 下载 Provider 插件，初始化工作目录</li><li><strong>计划变更</strong>：<code>terraform plan</code> 计算当前状态与目标状态的差异</li><li><strong>应用变更</strong>：<code>terraform apply</code> 按计划执行变更操作</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>一句话总结: Terraform = 用代码统一管理所有基础设施，实现快速、可靠、可追踪的交付。</p></div>`,18)]))}const f=a(o,[["render",s]]);export{m as __pageData,f as default};

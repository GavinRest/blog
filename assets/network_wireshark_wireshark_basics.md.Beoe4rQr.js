import{_ as e,c as i,o as s,ae as t}from"./chunks/framework.BHrE6nLq.js";const a="/images/wireshark/wireshark_panel.png",p="/images/wireshark/wireshark_tools_bar.png",o="/images/wireshark/wireshark_packet_mark.png",l="/images/wireshark/wireshark_shift.png",h="/images/wireshark/wireshark_appearance.png",u=JSON.parse('{"title":"wireshark 基础","description":"","frontmatter":{},"headers":[],"relativePath":"network/wireshark/wireshark_basics.md","filePath":"network/wireshark/wireshark_basics.md"}'),_={name:"network/wireshark/wireshark_basics.md"};function k(n,r,c,w,d,m){return s(),i("div",null,r[0]||(r[0]=[t('<h1 id="wireshark-基础" tabindex="-1">wireshark 基础 <a class="header-anchor" href="#wireshark-基础" aria-label="Permalink to &quot;wireshark 基础&quot;">​</a></h1><blockquote><p><a href="https://www.wireshark.org/download/docs/user-guide.pdf" target="_blank" rel="noreferrer">https://www.wireshark.org/download/docs/user-guide.pdf</a></p></blockquote><h3 id="面板简介" tabindex="-1">面板简介 <a class="header-anchor" href="#面板简介" aria-label="Permalink to &quot;面板简介&quot;">​</a></h3><hr><ul><li><p>Packet List(数据包列表):这个最上面的面板用表格显示了当前捕获文件 中的所有数据包，其中包括了数据包序号、数据包被捕获时的相对时间、数据 包的源地址和目标地址、数据包的协议以及在数据包中找到的概况信息等列。</p></li><li><p>Packet Details(数据包细节);这个中间的面板分层次地显示了一个数据包中 的内容，并且可以通过展开或是收缩来显示这个数据包中所捕获到的全部内容。</p></li><li><p>Packet Bytes(数据包字节);这个最下面的面板可能是最令人困惑的，因 为它显示了一个数据包未经处理的原始样子，也就是其在链路上传播时的样子。 这些原始数据看上去一点都不舒服而且不容易理解。</p><p><img src="'+a+'" alt="wireshark_panel"></p><p><img src="'+a+'" alt="wireshark_panel"></p></li><li><p>工具栏</p><p><img src="'+p+'" alt="wireshark_tools_bar"></p></li><li><p>数据包标记</p><p><img src="'+o+'" alt="wireshark_packet_mark"></p></li></ul><h3 id="基础设置" tabindex="-1">基础设置 <a class="header-anchor" href="#基础设置" aria-label="Permalink to &quot;基础设置&quot;">​</a></h3><hr><ul><li><p>时间显示格式：Wireshark 所捕获的每一个数据包都会由操作系统给予一个时间戳。Wireshark 可以显示这个数据被捕获时的绝对时间戳，也可以是与上一个被捕获的数据包或是捕获开始及结束相关的相对时间戳。</p></li><li><p>时间偏移：所有数据包/指定数据包，设置偏移1分钟（+00:01:00）</p><p><img src="'+l+'" alt="wireshark_shift"></p></li><li><p>外观设置</p><p><img src="'+h+'" alt="wireshark_appearance"></p></li></ul>',8)]))}const f=e(_,[["render",k]]);export{u as __pageData,f as default};

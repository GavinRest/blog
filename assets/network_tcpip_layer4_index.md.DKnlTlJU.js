import{_ as r,c as t,o as e,ae as o}from"./chunks/framework.BHrE6nLq.js";const l="/images/tcpip/layer4/Transport_Layer.webp",P=JSON.parse('{"title":"传输层 (Layer 4) 协议简介","description":"","frontmatter":{},"headers":[],"relativePath":"network/tcpip/layer4/index.md","filePath":"network/tcpip/layer4/index.md"}'),n={name:"network/tcpip/layer4/index.md"};function i(s,a,p,d,h,c){return e(),t("div",null,a[0]||(a[0]=[o('<h1 id="传输层-layer-4-协议简介" tabindex="-1">传输层 (Layer 4) 协议简介 <a class="header-anchor" href="#传输层-layer-4-协议简介" aria-label="Permalink to &quot;传输层 (Layer 4) 协议简介&quot;">​</a></h1><p>传输层是 OSI Model 负责端到端的数据传输，确保数据从源设备可靠地传输到目标设备。它负责数据分段、流量控制、错误检测和重传等任务，确保数据通信的可靠性。</p><hr><p><img src="'+l+'" alt="传输层"></p><h2 id="主要协议" tabindex="-1">主要协议 <a class="header-anchor" href="#主要协议" aria-label="Permalink to &quot;主要协议&quot;">​</a></h2><h3 id="_1-传输控制协议-tcp" tabindex="-1">1. <strong>传输控制协议 (TCP)</strong> <a class="header-anchor" href="#_1-传输控制协议-tcp" aria-label="Permalink to &quot;1. **传输控制协议 (TCP)**&quot;">​</a></h3><p>TCP 是一种面向连接、可靠的传输协议。它确保数据按顺序、无差错地从源传送到目标设备，使用三次握手建立连接，并通过确认机制、序列号等保证数据的可靠性。</p><ul><li><strong>流量控制</strong>：通过滑动窗口机制控制数据的发送速度。</li><li><strong>错误检测</strong>：通过校验和机制，确保数据在传输过程中不发生错误。</li><li><strong>重传机制</strong>：丢失的数据包会被重新传输，确保数据完整性。</li></ul><h3 id="_2-用户数据报协议-udp" tabindex="-1">2. <strong>用户数据报协议 (UDP)</strong> <a class="header-anchor" href="#_2-用户数据报协议-udp" aria-label="Permalink to &quot;2. **用户数据报协议 (UDP)**&quot;">​</a></h3><p>UDP 是一种无连接、不可靠的协议。它相较于 TCP 开销较小，传输速度较快，适用于实时性要求高的应用，如视频流、在线游戏等。</p><ul><li><strong>无连接</strong>：UDP 在发送数据前不需要建立连接。</li><li><strong>无重传</strong>：UDP 不进行重传机制，适合对丢包容忍的场景。</li><li><strong>适用场景</strong>：实时应用和低延迟通信。</li></ul><h3 id="_3-流控制协议-sctp" tabindex="-1">3. <strong>流控制协议 (SCTP)</strong> <a class="header-anchor" href="#_3-流控制协议-sctp" aria-label="Permalink to &quot;3. **流控制协议 (SCTP)**&quot;">​</a></h3><p>SCTP 是一种面向消息的可靠传输协议，兼具 TCP 的可靠性和 UDP 的效率。它支持多条流同时传输数据，适用于需要高可靠性和多流传输的应用，如信令系统。</p><ul><li><strong>多流传输</strong>：SCTP 支持多个独立的消息流，减少数据传输延迟。</li><li><strong>消息有序性</strong>：SCTP 保证消息按顺序传输，并提供流量控制。</li></ul><h2 id="传输层的功能" tabindex="-1">传输层的功能 <a class="header-anchor" href="#传输层的功能" aria-label="Permalink to &quot;传输层的功能&quot;">​</a></h2><ul><li><strong>数据分段与重组</strong>：将来自上层协议的数据分段并传输，接收端负责数据重组。</li><li><strong>流量控制</strong>：控制数据的发送速率，避免网络拥塞。</li><li><strong>错误检测与恢复</strong>：通过确认机制和重传机制，确保数据传输的可靠性。</li><li><strong>端到端通信</strong>：确保源设备和目标设备之间的直接通信，提供可靠的传输服务。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>传输层在网络协议栈中负责确保端到端的数据传输可靠性。通过协议如 TCP、UDP 和 SCTP，传输层提供分段、流量控制和错误恢复等功能，为应用层提供可靠和高效的数据传输通道。</p>',18)]))}const _=r(n,[["render",i]]);export{P as __pageData,_ as default};
